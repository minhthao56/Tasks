import React from 'react';
import {StyleProp, Text, TextStyle} from 'react-native';
import {fontScale, heightScale, widthScale} from '../utils';
import {ILable} from './@types/Lable';

export const Lable: React.FC<ILable> = ({
  children,
  onPress,
  flex,
  style,
  row,
  white,
  noflex,
  backgroundColor,
  flexDirection,
  column,
  center,
  middle,
  spaceBetween,
  stretch,
  relative,
  absolute,
  wrap,
  opacity,
  borderColor,
  borderRadius,
  zIndex,
  right,
  left,
  top,
  bottom,
  width,
  height,
  alignItems,
  borderStyle,
  borderWidth,
  alignSelf,
  position,
  maxWidth,
  maxHeight,
  minHeight,
  minWidth,
  padding,
  paddingBottom,
  paddingLeft,
  paddingRight,
  paddingTop,
  margin,
  marginBottom,
  marginLeft,
  marginRight,
  marginTop,
  fontWeight = '500',
  fontSize,
  bold,
  regular,
  light,
  underline,
  color = 'white',
  textAlign,
  fontBlack,
  h1,
  h2,
  h3,
  h4,
  italic,
  bolditalic,
  marginHorizontal,
  marginVertical,
  paddingHorizontal,
  paddingVertical,
}) => {
  const styleText: StyleProp<TextStyle> = [
    style,
    {fontFamily: 'Helvetica Neue', fontSize: fontScale(16)},
    fontWeight && {fontWeight},
    row && {flexDirection: 'row'},
    flex && {flex: 1},
    typeof flex === 'number' && {flex},
    white && {backgroundColor: 'white'},
    noflex && {flex: 0},
    column && {flexDirection: 'column'},
    center && {alignItems: 'center'},
    middle && {justifyContent: 'center'},
    spaceBetween && {justifyContent: 'space-between'},
    stretch && {alignItems: 'stretch'},
    relative && {position: 'relative'},
    absolute && {position: 'absolute'},
    wrap && {flexWrap: 'wrap'},
    maxWidth && {maxWidth: widthScale(maxWidth)},
    maxHeight && {maxHeight: heightScale(maxHeight)},
    minHeight && {minHeight: heightScale(minHeight)},
    minWidth && {minWidth: widthScale(minWidth)},
    width && {width: widthScale(width)},
    height && {height: heightScale(height)},
    bold && {fontWeight: 'bold'},
    regular && {fontWeight: 'normal'},
    light && {fontWeight: '200'},
    underline && {textDecorationColor: 'underline'},
    fontBlack && {fontWeight: '900'},
    h1 && {fontSize: fontScale(32)},
    h2 && {fontSize: fontScale(24)},
    h3 && {fontSize: fontScale(22)},
    h4 && {fontSize: fontScale(20)},
    italic && {fontStyle: 'italic'},
    bolditalic && {fontStyle: 'italic', fontWeight: '700'},
    borderColor && {borderColor},
    borderRadius && {borderRadius},
    borderStyle && {borderStyle},
    borderWidth && {borderWidth},
    opacity && {opacity},
    zIndex && {zIndex},
    right && {right},
    left && {left},
    top && {top},
    bottom && {bottom},
    backgroundColor && {backgroundColor},
    alignItems && {alignItems},
    alignSelf && {alignSelf},
    flexDirection && {flexDirection},
    position && {position},
    padding && {padding: widthScale(padding)},
    paddingBottom && {paddingBottom: widthScale(paddingBottom)},
    paddingLeft && {paddingLeft: widthScale(paddingLeft)},
    paddingRight && {paddingRight: widthScale(paddingRight)},
    paddingTop && {paddingTop: widthScale(paddingTop)},
    margin && {margin: widthScale(margin)},
    marginBottom && {marginBottom: widthScale(marginBottom)},
    marginLeft && {marginLeft: widthScale(marginLeft)},
    marginRight && {marginRight: widthScale(marginRight)},
    marginTop && {marginTop: widthScale(marginTop)},
    fontSize && {fontSize: fontScale(fontSize)},
    color && {color},
    textAlign && {textAlign},
    marginHorizontal && {marginHorizontal: widthScale(marginHorizontal)},
    paddingHorizontal && {paddingHorizontal: widthScale(paddingHorizontal)},
    marginVertical && {marginVertical: widthScale(marginVertical)},
    paddingVertical && {paddingVertical: widthScale(paddingVertical)},
  ];
  return (
    <Text onPress={onPress} style={styleText} allowFontScaling={false}>
      {children}
    </Text>
  );
};
